{{- $osdep := index .TemplateArgs "os_ver" -}}

FROM {{ .From }}

{{- $gosu := index .Packages "gosu" }}
{{- $mongodb := index .Packages "mongodb" }}

# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added
RUN groupadd -r mongodb && useradd -r -g mongodb mongodb

{{- if (eq $osdep "9") }}
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        gnupg dirmngr \
        jq \
        numactl \
        curl \
    && rm -rf /var/lib/apt/lists/*
{{- else }}
RUN apt-get update \
        && apt-get install -y --no-install-recommends \
           numactl \
           gnupg \
           dirmngr \
        && rm -rf /var/lib/apt/lists/*
{{- end}}

# grab gosu for easy step-down from root
ENV GOSU_VERSION {{ $gosu.Version }}
ENV GOSU_GPG {{ $gosu.Gpg }}

RUN set -x \
        && apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \
        && wget -q -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)" \
        && wget -q -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc" \
# copy source code
        && wget -q -O /usr/local/src/gosu.tar.gz "https://github.com/tianon/gosu/archive/$GOSU_VERSION.tar.gz" \
# extract gosu binary and check signature
        && export GNUPGHOME="$(mktemp -d)" \
        && {{ `gpg --keyserver $server --recv-keys $GOSU_GPG` | KeyServersRetryLoop "\t" }} \
        && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
        && rm -r -f "$GNUPGHOME" /usr/local/bin/gosu.asc \
        && chmod +x /usr/local/bin/gosu \
        && gosu nobody true \
        && apt-get purge -y --auto-remove ca-certificates wget

{{- if (eq $osdep "9") }}
RUN mkdir /docker-entrypoint-initdb.d
{{- end}}

ENV GPG_KEYS {{ $mongodb.Gpg }}
RUN set -ex; \
        export GNUPGHOME="$(mktemp -d)"; \
        for key in $GPG_KEYS; do \
        {{ `gpg --keyserver $server --recv-keys $key` | KeyServersRetryLoop "\t" }} \
        ; done; \
        gpg --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mongodb.gpg; \
        rm -r -f "$GNUPGHOME"; \
        apt-key list

ENV MONGO_MAJOR {{ $mongodb.Major }}
ENV MONGO_VERSION {{ $mongodb.Version }}
ENV MONGO_PACKAGE mongodb-org

RUN export DEBIAN_RELASE=$(cat /etc/*-release | grep PRETTY_NAME | sed  's/.*(//;s/).*//') \
    && echo "deb http://repo.mongodb.org/apt/debian $DEBIAN_RELASE/mongodb-org/$MONGO_MAJOR main" > /etc/apt/sources.list.d/mongodb-org.list

RUN set -x \
        && apt-get update \
        && apt-get install -y \
                ${MONGO_PACKAGE}=$MONGO_VERSION \
                ${MONGO_PACKAGE}-server=$MONGO_VERSION \
                ${MONGO_PACKAGE}-shell=$MONGO_VERSION \
                ${MONGO_PACKAGE}-mongos=$MONGO_VERSION \
                ${MONGO_PACKAGE}-tools=$MONGO_VERSION \
        && rm -rf /var/lib/apt/lists/* \
        && rm -rf /var/lib/mongodb \
        && mv /etc/mongod.conf /etc/mongod.conf.orig

RUN mkdir -p /data/db /data/configdb \
        && chown -R mongodb:mongodb /data/db /data/configdb
VOLUME /data/db /data/configdb

COPY docker-entrypoint.sh /entrypoint.sh

{{- if (eq $osdep "9") }}
RUN set -ex \
    && apt-get update \
    && apt-get -y install git \
    && cd /usr/src \
    && git clone https://github.com/mongodb/mongo.git \
    && tar czf mongo.tgz mongo \
    && rm -r mongo \
    && apt-get remove -y git
{{- end}}

ENTRYPOINT ["/entrypoint.sh"]

EXPOSE 27017
CMD ["mongod"]

